@using Sandbox
@using Sandbox.UI
@using Sandcube.Interactions
@using Sandcube.Inventories
@using Sandcube.Inventories.Players
@using Sandcube.Items
@using Sandcube.UI.Inventories
@using Sandcube.UI.Menus
@using System
@using System.Linq

@namespace Sandcube.UI.Inventories.Players
@attribute [StyleSheet] // TODO: reuse stylesheet of parent class
@inherits InventoryUI

<root class="inventory-ui">
    @if(Capabilities is not null)
    {
        <div class="capabilities">
            @foreach(var capability in Enumerable.Reverse(Capabilities))
            {
                if(capability is CreativeItemStackInventory)
                {
                    <ItemCapabilityUI class="capability" Capability=@capability Width=@Width MouseEventListener=@this
                    HideItemCount=@true StartIndex=@(Width * StartLine) CountToShow=@(Width * LinesCount)/>
                }
                else
                {
                    
                    <ItemCapabilityUI class="capability" Capability=@capability Width=@Width MouseEventListener=@this/>
                }
            }
        </div>
        <ItemStackUI class="stack taken @(TakenStack.IsEmpty ? "hidden" : string.Empty)" Stack=@TakenStack @ref=TakenStackUI/>
    }
</root>

@code
{
    [Property] public PlayerInventory PlayerInventory { get; set; } // TODO: change to IPlayerInventory
    protected int StartLine = 0;

    protected override System.Collections.Generic.IEnumerable<IIndexedCapability<Stack<Item>>> Capabilities
        => PlayerInventory is null ? Enumerable.Empty<IIndexedCapability<Stack<Item>>>() :
        new System.Collections.Generic.List<IIndexedCapability<Stack<Item>>>() {
            PlayerInventory.Hotbar,
            CreativeItemStackInventory.Instance
        };
    protected override int Width => PlayerInventory?.Hotbar.Size ?? 9;
    protected virtual int LinesCount => 5;

    protected override void OnUpdate()
    {
        base.OnUpdate();

        if(IsOpened)
            ScrollInventory(-(int)Input.MouseWheel.y); // TODO: make working
    }

    protected virtual void ScrollInventory(int delta)
    {
        var maxLine = (CreativeItemStackInventory.Instance.Size / Width + (CreativeItemStackInventory.Instance.Size % Width == 0 ? 0 : 1));
        maxLine -= LinesCount;

        var newStartLine = StartLine + delta;
        if(newStartLine > maxLine)
            newStartLine = maxLine;
        if(newStartLine < 0)
            newStartLine = 0;
        StartLine = newStartLine;
    }

    protected override int BuildHash() => HashCode.Combine(base.BuildHash(), StartLine, LinesCount);

    public override void OnMouseDownOnSlot(IIndexedCapability<Sandcube.Inventories.Stack<Item>> capability, int slotIndex, MouseButtons mouseButton)
    {
        if(capability is CreativeItemStackInventory && TakenStack.IsEmpty)
        {
            var countToTake = 0;
            if (mouseButton == MouseButtons.Left)
                countToTake = 1;
            else if (mouseButton == MouseButtons.Middle)
                countToTake = capability.Get(slotIndex).Count;

            if(countToTake > 0)
            {
                TakenStack = capability.ExtractMax(slotIndex, countToTake);
                CapabilityTakenFrom = capability;
                IndexTakenFrom = slotIndex;
                WaitingMouseUps.Add(mouseButton);
            }
            return;
        }

        base.OnMouseDownOnSlot(capability, slotIndex, mouseButton);
    }

    public override void OnMouseUpOnSlot(IIndexedCapability<Sandcube.Inventories.Stack<Item>> capability, int slotIndex, MouseButtons mouseButton)
    {
        if(WaitingMouseUps.Remove(mouseButton))
            return;

        if(capability is CreativeItemStackInventory)
        {
            TakenStack = Stack<Item>.Empty;
            return;
        }

        base.OnMouseUpOnSlot(capability, slotIndex, mouseButton);
    }
}
