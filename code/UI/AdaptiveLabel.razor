@using Sandbox;
@using Sandbox.UI;
@using System;
@using System.Linq;


@namespace VoxelWorld.UI
@inherits Label

<root>
</root>

@code
{
    public Length? GetFontSizeStyle(Panel panel)
    {
        foreach(var styleBlock in panel.ActiveStyleBlocks)
        {
            foreach(var property in styleBlock.GetRawValues())
            {
                if(property.Name == "font-size")
                    return Length.Parse(property.Value);
            }
        }

        if (panel.Parent is not null && panel.Parent != panel)
            return GetFontSizeStyle(panel.Parent);

        return null;
    }

    protected virtual void UpdateStyle()
    {
        var requiredFontSize = GetFontSizeStyle(this);
        if(requiredFontSize.HasValue && requiredFontSize.Value.Unit == LengthUnit.Percentage)
        {
            var neededSize = requiredFontSize.Value.Value / 100f * Parent.Box.Rect.Height / FindRootPanel().Scale;
            Style.FontSize = Length.Pixels(neededSize);
        }
        else
        {
            Style.FontSize = null;
        }
    }

    public override void FinalLayout(Vector2 offset)
    {
        UpdateStyle();
        base.FinalLayout(offset);
    }

    public override void OnHotloaded()
    {
        base.OnHotloaded();
        UpdateStyle();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        UpdateStyle();
    }

    protected override int BuildHash() => HashCode.Combine(Text, FindRootPanel().Scale, Parent.Box.Rect.Height);
}